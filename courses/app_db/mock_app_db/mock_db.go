// Code generated by MockGen. DO NOT EDIT.
// Source: ./db.go

// Package mock_app_db is a generated GoMock package.
package mock_app_db

import (
	context "context"
	reflect "reflect"

	pbdto "github.com/aybjax/nis_lib/pbdto"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AddStudentIdTo mocks base method.
func (m *MockDB) AddStudentIdTo(ctx context.Context, id, courseId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStudentIdTo", ctx, id, courseId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStudentIdTo indicates an expected call of AddStudentIdTo.
func (mr *MockDBMockRecorder) AddStudentIdTo(ctx, id, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStudentIdTo", reflect.TypeOf((*MockDB)(nil).AddStudentIdTo), ctx, id, courseId)
}

// Close mocks base method.
func (m *MockDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Create mocks base method.
func (m *MockDB) Create(ctx context.Context, payload *pbdto.Course) (string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockDBMockRecorder) Create(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDB)(nil).Create), ctx, payload)
}

// Delete mocks base method.
func (m *MockDB) Delete(ctx context.Context, id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDBMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDB)(nil).Delete), ctx, id)
}

// DeleteStudentIdFrom mocks base method.
func (m *MockDB) DeleteStudentIdFrom(ctx context.Context, id, courseId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudentIdFrom", ctx, id, courseId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStudentIdFrom indicates an expected call of DeleteStudentIdFrom.
func (mr *MockDBMockRecorder) DeleteStudentIdFrom(ctx, id, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudentIdFrom", reflect.TypeOf((*MockDB)(nil).DeleteStudentIdFrom), ctx, id, courseId)
}

// GetStudentIds mocks base method.
func (m *MockDB) GetStudentIds(id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentIds", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentIds indicates an expected call of GetStudentIds.
func (mr *MockDBMockRecorder) GetStudentIds(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentIds", reflect.TypeOf((*MockDB)(nil).GetStudentIds), id)
}

// ReadAll mocks base method.
func (m *MockDB) ReadAll(ctx context.Context) ([]*pbdto.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", ctx)
	ret0, _ := ret[0].([]*pbdto.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockDBMockRecorder) ReadAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDB)(nil).ReadAll), ctx)
}

// ReadById mocks base method.
func (m *MockDB) ReadById(ctx context.Context, id string) (*pbdto.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadById", ctx, id)
	ret0, _ := ret[0].(*pbdto.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadById indicates an expected call of ReadById.
func (mr *MockDBMockRecorder) ReadById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadById", reflect.TypeOf((*MockDB)(nil).ReadById), ctx, id)
}

// ReadByStudentId mocks base method.
func (m *MockDB) ReadByStudentId(ctx context.Context, studentId string) ([]*pbdto.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByStudentId", ctx, studentId)
	ret0, _ := ret[0].([]*pbdto.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByStudentId indicates an expected call of ReadByStudentId.
func (mr *MockDBMockRecorder) ReadByStudentId(ctx, studentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByStudentId", reflect.TypeOf((*MockDB)(nil).ReadByStudentId), ctx, studentId)
}

// Update mocks base method.
func (m *MockDB) Update(ctx context.Context, id string, payload *pbdto.Course) ([]string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, payload)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockDBMockRecorder) Update(ctx, id, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDB)(nil).Update), ctx, id, payload)
}
