// Code generated by MockGen. DO NOT EDIT.
// Source: ./queue.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	reflect "reflect"

	pbdto "github.com/aybjax/nis_lib/pbdto"
	gomock "github.com/golang/mock/gomock"
)

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// CourseChangedListener mocks base method.
func (m *MockQueue) CourseChangedListener(cb func(context.Context, *pbdto.UpdateEmbedded) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CourseChangedListener", cb)
}

// CourseChangedListener indicates an expected call of CourseChangedListener.
func (mr *MockQueueMockRecorder) CourseChangedListener(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CourseChangedListener", reflect.TypeOf((*MockQueue)(nil).CourseChangedListener), cb)
}

// EnqueueTransformNotify mocks base method.
func (m *MockQueue) EnqueueTransformNotify(queueMsg *pbdto.DiffIds) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueTransformNotify", queueMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueTransformNotify indicates an expected call of EnqueueTransformNotify.
func (mr *MockQueueMockRecorder) EnqueueTransformNotify(queueMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueTransformNotify", reflect.TypeOf((*MockQueue)(nil).EnqueueTransformNotify), queueMsg)
}

// NotifyStudentChanged mocks base method.
func (m *MockQueue) NotifyStudentChanged(arg0 context.Context, update *pbdto.UpdateEmbedded) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyStudentChanged", arg0, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyStudentChanged indicates an expected call of NotifyStudentChanged.
func (mr *MockQueueMockRecorder) NotifyStudentChanged(arg0, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyStudentChanged", reflect.TypeOf((*MockQueue)(nil).NotifyStudentChanged), arg0, update)
}

// TransformNotifyListener mocks base method.
func (m *MockQueue) TransformNotifyListener(cb func(context.Context, *pbdto.DiffIds) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TransformNotifyListener", cb)
}

// TransformNotifyListener indicates an expected call of TransformNotifyListener.
func (mr *MockQueueMockRecorder) TransformNotifyListener(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformNotifyListener", reflect.TypeOf((*MockQueue)(nil).TransformNotifyListener), cb)
}
